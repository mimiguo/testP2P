<?xml version="1.0" encoding="UTF-8"?>
<s:Application creationComplete="
{
    this.creationCompleteHandler();
    return;
}

" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx">
    <fx:Declarations />
    <s:VGroup left="0" right="0" bottom="0" top="0" gap="0">
        <s:mxmlContent>
            <s:Group percentWidth="100" percentHeight="100" contentBackgroundColor="#000000" contentBackgroundAlpha="1" id="mainCanvas">
                <s:mxmlContent>
                    <s:BorderContainer x="0" y="0" percentWidth="100" percentHeight="100" backgroundColor="#000000" id="videoPlaceholder" />
                    <s:Label horizontalCenter="0" verticalCenter="0" width="160" height="20" visible="false" textAlign="center" fontWeight="bold" backgroundColor="#000000" backgroundAlpha="0.75" color="#ffffff" verticalAlign="middle" id="waitingMessage" text="{waitingMessageText}" />
                    <s:TextArea left="0" bottom="0" width="400" visible="false" height="350" editable="false" fontSize="10" verticalScrollPolicy="auto" color="#ffffff" id="statsLog" text="{statsText}" />
                    <s:TextArea right="0" bottom="0" width="300" visible="false" height="230" editable="false" verticalScrollPolicy="auto" color="#ffffff" id="debugLog" text="{debugText}" />
                </s:mxmlContent>
            </s:Group>
            <s:HGroup percentWidth="100" height="25" paddingLeft="0" paddingRight="0" paddingBottom="0">
                <s:mxmlContent>
                    <s:Group percentWidth="100" percentHeight="100">
                        <s:mxmlContent>
                            <fx:Array>
                                <s:Button x="0" y="0" label="Toggle Status" click="
                                            {
                                                this.toggleStatus();
                                                return;
                                            }
                                            
                                            " id="_MulticastPlayer_Button1" visible="{debugMode}" />
                            </fx:Array>
                        </s:mxmlContent>
                    </s:Group>
                    <s:HGroup verticalAlign="middle" visible="false" id="controlsCanvas">
                        <s:mxmlContent>
                            <s:BorderContainer height="22" width="22" styleName="unmuted" toolTip="Mute" borderVisible="false" click="
                                            {
                                                this.toggleMute();
                                                return;
                                            }
                                            
                                            " id="muteBtn" />
                            <s:HSlider dataTipFormatFunction="{this.showVolume}" minimum="0" maximum="100" dataTipPrecision="0" value="50" toolTip="Volume" liveDragging="true" change="
                                            {
                                                this.adjustVolume();
                                                return;
                                            }
                                            
                                            " id="volumeSlider" />
                            <s:BorderContainer height="22" width="22" styleName="fullScreenButton" toolTip="Full Screen" borderVisible="false" click="
                                            {
                                                this.goFullScreen();
                                                return;
                                            }
                                            
                                            " />
                        </s:mxmlContent>
                    </s:HGroup>
                </s:mxmlContent>
            </s:HGroup>
        </s:mxmlContent>
    </s:VGroup>
    <s:Group x="0" y="0" height="0" width="0" id="overlayCanvas" />
    <fx:Style>
        
        spark.components.BorderContainer.fullScreenButton
        {
            paddingTop: 0;
            backgroundImage: ClassReference("MulticastPlayer__embed_css_assets_fullscreen_png_553148874");
            paddingLeft: 0;
            paddingBottom: 0;
            paddingRight: 0;
        }
        spark.components.BorderContainer.muted
        {
            paddingTop: 0;
            backgroundImage: ClassReference("MulticastPlayer__embed_css_assets_muted_png_605320906");
            paddingLeft: 0;
            paddingBottom: 0;
            paddingRight: 0;
        }
        spark.components.BorderContainer.unmuted
        {
            paddingTop: 0;
            backgroundImage: ClassReference("MulticastPlayer__embed_css_assets_unmuted_png_2089917964");
            paddingLeft: 0;
            paddingBottom: 0;
            paddingRight: 0;
        }
        
    </fx:Style>
    <fx:Script>
        <![CDATA[
        import flash.accessibility.*;
        import flash.debugger.*;
        import flash.display.*;
        import flash.errors.*;
        import flash.events.*;
        import flash.external.*;
        import flash.geom.*;
        import flash.media.*;
        import flash.net.*;
        import flash.printing.*;
        import flash.profiler.*;
        import flash.system.*;
        import flash.text.*;
        import flash.ui.*;
        import flash.utils.*;
        import flash.xml.*;
        import mx.controls.*;
        import mx.core.*;
        import mx.events.*;
        import mx.filters.*;
        import mx.styles.*;
        
        internal function creationCompleteHandler():void
        {
            this.debug("Version: " + flash.system.Capabilities.version + "\nSandbox: " + flash.system.Security.sandboxType);
            this.vidMain = new flash.media.Video();
            this.vidMain.x = 0;
            this.vidMain.y = 0;
            this.vidMain.width = 854;
            this.vidMain.height = 480;
            this.vidUI = new mx.core.UIComponent();
            this.vidUI.addChild(this.vidMain);
            this.videoPlaceholder.addElement(this.vidUI);
            callLater(this.addFSHandler);
            this.addEventListener(flash.events.Event.ENTER_FRAME, this.enterFrameHandler);
            this.waitingTimer = new flash.utils.Timer(500, 0);
            this.waitingTimer.addEventListener(flash.events.TimerEvent.TIMER, this.waitingTimerHandler);
            this.statsTimer = new flash.utils.Timer(2000, 0);
            this.statsTimer.addEventListener(flash.events.TimerEvent.TIMER, this.statusTimerHandler);
            this.reconnectTimer = new flash.utils.Timer(5000, 0);
            this.reconnectTimer.addEventListener(flash.events.TimerEvent.TIMER, this.reconnectTimerHandler);
            this.debug(":: creation complete ::");
            this.checkFlashVars();
            return;
        }

        internal function checkFlashVars():void
        {
            var loc3:*=NaN;
            var loc1:*=this.parameters;
            if (loc1.hasOwnProperty("bufferTime")) 
            {
                loc3 = Number(loc1["bufferTime"]);
                if (isNaN(loc3) || loc3 < 0) 
                {
                    mx.controls.Alert.show("Buffer Time must be a number, zero or greater.");
                    return;
                }
                this.bufferTime = loc3;
            }
            else 
            {
                this.bufferTime = this.DEFAULT_BUFFER_TIME;
            }
            if (loc1.hasOwnProperty("debug")) 
            {
                this.debugMode = String(loc1["debug"]) == "true";
            }
            if (!loc1.hasOwnProperty("manifest")) 
            {
                mx.controls.Alert.show("You must supply the URL to a manifest file.");
                return;
            }
            var loc2:*=new flash.net.URLRequest(loc1["manifest"]);
            this.fetchManifest(loc2);
            return;
        }

        internal function enterFrameHandler(arg1:flash.events.Event):void
        {
            this.resizeVideo();
            return;
        }

        internal function addFSHandler():void
        {
            stage.addEventListener(flash.events.FullScreenEvent.FULL_SCREEN, this.onFSHandler);
            return;
        }

        internal function fetchManifest(arg1:flash.net.URLRequest):void
        {
            var loc1:*=new flash.net.URLLoader();
            loc1.addEventListener(flash.events.Event.COMPLETE, this.xmlLoaderHandler);
            loc1.addEventListener(flash.events.IOErrorEvent.IO_ERROR, this.xmlLoaderError);
            loc1.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.xmlLoaderError);
            loc1.load(arg1);
            return;
        }

        internal function xmlLoaderHandler(arg1:flash.events.Event):void
        {
            this.manifestXML = new XML(arg1.currentTarget.data);
            this.validateManifest();
            return;
        }

        internal function xmlLoaderError(arg1:flash.events.ErrorEvent):void
        {
            mx.controls.Alert.show("There was an error loading the manifest file.\n\n" + arg1.text);
            return;
        }

        internal function validateManifest():void
        {
            if (this.manifestXML.media.length() < 1) 
            {
                mx.controls.Alert.show("The manifest file must include a <media> tag.");
                return;
            }
            var loc1:*=this.manifestXML.media[0];
            if (!("@url" in loc1) || !("@groupspec" in loc1) || !("@multicastStreamName" in loc1)) 
            {
                mx.controls.Alert.show("The <media> tag must include the attributes \"url\" " + "\"groupspec\" and \"multicastStreamName\"");
                return;
            }
            this.rtmfpURI = loc1.@url;
            this.streamName = loc1.@multicastStreamName;
            this.groupspec = loc1.@groupspec;
            var loc2:*=new RegExp("rtmfp:\\/\\/.*\\/.*");
            if (!(this.rtmfpURI.toLocaleLowerCase() == "rtmfp:") && !loc2.test(this.rtmfpURI)) 
            {
                mx.controls.Alert.show("You must supply a RTMFP address in the form of:" + "\n \"rtmfp://server/app\" \n or\n " + "\"rtmfp:\" (for IP Multicast)");
                return;
            }
            if (this.groupspec.substr(0, 4).toLowerCase() == "g%3a") 
            {
                this.groupspec = "G:" + this.groupspec.substring(4);
            }
            if (this.groupspec.charAt(0) == "g") 
            {
                this.groupspec = "G" + this.groupspec.substring(1);
            }
            if (this.groupspec.substr(0, 2).toLowerCase() != "g:") 
            {
                mx.controls.Alert.show("You must supply a properly formatted groupspec.");
                return;
            }
            this.connectRTMFP();
            return;
        }

        internal function connectRTMFP():void
        {
            this.debug(":: initiating connection ::");
            this.nc = new flash.net.NetConnection();
            var loc1:*={};
            this.nc.client = loc1;
            this.nc.addEventListener(flash.events.NetStatusEvent.NET_STATUS, this.netStatusHandler);
            this.nc.connect(this.rtmfpURI);
            return;
        }

        internal function reconnectTimerHandler(arg1:flash.events.TimerEvent=null):void
        {
            if (this.reconnectTimer.currentCount < 2) 
            {
                this.connectRTMFP();
            }
            return;
        }

        internal function netStatusHandler(arg1:flash.events.NetStatusEvent):void
        {
            this.debug("RTMFP: " + arg1.info.code);
            var loc1:*=arg1.info.code;
            switch (loc1) 
            {
                case "NetConnection.Connect.Success":
                {
                    this.reconnectTimer.reset();
                    this.formNetGroup();
                    break;
                }
                case "NetConnection.Connect.Closed":
                {
                    this.statsTimer.stop();
                    this.reconnectTimer.start();
                    break;
                }
                case "NetConnection.Connect.Failed":
                {
                    mx.controls.Alert.show("The connection attempt to FMS failed.");
                    break;
                }
                case "NetConnection.Connect.Rejected":
                {
                    mx.controls.Alert.show("The connection attempt was rejected.");
                    break;
                }
                case "NetGroup.Connect.Success":
                {
                    this.playStream();
                    break;
                }
                case "NetGroup.Connect.Rejected":
                {
                    mx.controls.Alert.show("Peer Assisted Networking is required.\n" + "Please reload this page and select  \"Allow\" " + " when prompted.", "");
                    break;
                }
                case "NetGroup.MulticastStream.PublishNotify":
                {
                    this.waitingMessageText = this.WAITING_BUFFER_MESSAGE;
                    break;
                }
                case "NetGroup.MulticastStream.UnpublishNotify":
                {
                    this.waitingMessageText = this.WAITING_COMPLETE_MESSAGE;
                    break;
                }
                case "NetStream.Connect.Success":
                {
                    this.statsTimer.start();
                    this.controlsCanvas.visible = true;
                    break;
                }
                case "NetStream.Play.Failed":
                {
                    mx.controls.Alert.show("You must use a groupspec with multicast enabled.");
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        internal function formNetGroup():void
        {
            this.debug(":: initiating group ::");
            this.ng = new flash.net.NetGroup(this.nc, this.groupspec);
            this.ng.addEventListener(flash.events.NetStatusEvent.NET_STATUS, this.netStatusHandler);
            return;
        }

        internal function playStream():void
        {
            var co:Object;
            var st:flash.media.SoundTransform;

            var loc1:*;
            this.debug(":: initiating stream ::");
            this.ns = new flash.net.NetStream(this.nc, this.groupspec);
            this.ns.addEventListener(flash.events.NetStatusEvent.NET_STATUS, this.netStatusHandler);
            co = {};
            co.onPlayStatus = function (... rest):void
            {
                return;
            }
            co.onMetaData = function (... rest):void
            {
                return;
            }
            co.onXMPData = function (... rest):void
            {
                return;
            }
            co.onFI = function (... rest):void
            {
                return;
            }
            this.ns.client = co;
            this.ns.play(this.streamName);
            this.ns.bufferTime = Number(this.bufferTime);
            this.vidMain.attachNetStream(this.ns);
            st = new flash.media.SoundTransform();
            st.volume = 0.5;
            this.ns.soundTransform = st;
            this.volumeSlider.value = 50;
            this.waitingTimer.start();
            return;
        }

        internal function adjustVolume(arg1:int=0):void
        {
            if (arg1 != 1) 
            {
                if (arg1 == -1) 
                {
                    this.volumeSlider.value = this.lastVolume;
                }
            }
            else 
            {
                this.lastVolume = this.volumeSlider.value;
                this.volumeSlider.value = 0;
            }
            this.muteBtn.styleName = this.volumeSlider.value != 0 ? "unmuted" : "muted";
            var loc1:*=new flash.media.SoundTransform();
            loc1.volume = Number(this.volumeSlider.value * 0.01);
            if (this.ns) 
            {
                this.ns.soundTransform = loc1;
            }
            return;
        }

        internal function showVolume(arg1:String):String
        {
            return "" + Math.round(Number(arg1)) + "";
        }

        internal function toggleMute():void
        {
            if (this.muteBtn.styleName != "unmuted") 
            {
                this.adjustVolume(-1);
            }
            else 
            {
                this.adjustVolume(1);
            }
            var loc1:*=new flash.media.SoundTransform();
            loc1.volume = Number(this.volumeSlider.value * 0.01);
            if (this.ns) 
            {
                this.ns.soundTransform = loc1;
            }
            return;
        }

        internal function statusTimerHandler(arg1:flash.events.TimerEvent):void
        {
            var te:flash.events.TimerEvent;

            var loc1:*;
            te = arg1;
            if (!this.ns || !this.statsLog.visible) 
            {
                return;
            }
            this.statsText = "\n:: Stats ::\n\n";
            try 
            {
                this.statsText = this.statsText + ("sendDataBytesPerSecond: " + Number(this.ns.multicastInfo.sendDataBytesPerSecond).toFixed(2));
                this.statsText = this.statsText + ("\nsendControlBytesPerSecond: " + Number(this.ns.multicastInfo.sendControlBytesPerSecond).toFixed(2));
                this.statsText = this.statsText + ("\nreceiveDataBytesPerSecond: " + Number(this.ns.multicastInfo.receiveDataBytesPerSecond).toFixed(2));
                this.statsText = this.statsText + ("\nreceiveControlBytesPerSecond: " + Number(this.ns.multicastInfo.receiveControlBytesPerSecond).toFixed(2));
                this.statsText = this.statsText + ("\nbytesPushedToPeers: " + Number(this.ns.multicastInfo.bytesPushedToPeers).toFixed(2));
                this.statsText = this.statsText + ("\nfragmentsPushedToPeers: " + Number(this.ns.multicastInfo.fragmentsPushedToPeers).toFixed(2));
                this.statsText = this.statsText + ("\nbytesRequestedByPeers: " + Number(this.ns.multicastInfo.bytesRequestedByPeers).toFixed(2));
                this.statsText = this.statsText + ("\nfragmentsRequestedByPeers: " + Number(this.ns.multicastInfo.fragmentsRequestedByPeers).toFixed(2));
                this.statsText = this.statsText + ("\nbytesPushedFromPeers: " + Number(this.ns.multicastInfo.bytesPushedFromPeers).toFixed(2));
                this.statsText = this.statsText + ("\nfragmentsPushedFromPeers: " + Number(this.ns.multicastInfo.fragmentsPushedFromPeers).toFixed(2));
                this.statsText = this.statsText + ("\nbytesRequestedFromPeers: " + Number(this.ns.multicastInfo.bytesRequestedFromPeers).toFixed(2));
                this.statsText = this.statsText + ("\nfragmentsRequestedFromPeers: " + Number(this.ns.multicastInfo.fragmentsRequestedFromPeers).toFixed(2));
                this.statsText = this.statsText + ("\nsendControlBytesPerSecondToServer: " + Number(this.ns.multicastInfo.sendControlBytesPerSecondToServer).toFixed(2));
                this.statsText = this.statsText + ("\nreceiveDataBytesPerSecondFromServer: " + Number(this.ns.multicastInfo.receiveDataBytesPerSecondFromServer).toFixed(2));
                this.statsText = this.statsText + ("\nbytesReceivedFromServer: " + Number(this.ns.multicastInfo.bytesReceivedFromServer).toFixed(2));
                this.statsText = this.statsText + ("\nfragmentsReceivedFromServer: " + Number(this.ns.multicastInfo.fragmentsReceivedFromServer).toFixed(2));
                this.statsText = this.statsText + ("\nreceiveDataBytesPerSecondFromIPMulticast: " + Number(this.ns.multicastInfo.receiveDataBytesPerSecondFromIPMulticast).toFixed(2));
                this.statsText = this.statsText + ("\nbytesReceivedFromIPMulticast: " + Number(this.ns.multicastInfo.bytesReceivedFromIPMulticast).toFixed(2));
                this.statsText = this.statsText + ("\nfragmentsReceivedFromIPMulticast: " + Number(this.ns.multicastInfo.fragmentsReceivedFromIPMulticast).toFixed(2));
                this.statsText = this.statsText + ("\nestimatedMemberCount: " + Number(this.ng.estimatedMemberCount).toFixed(2));
                this.statsText = this.statsText + ("\nneighborCount: " + Number(this.ng.neighborCount).toFixed(2));
                this.statsText = this.statsText + ("\nbufferLength: " + Number(this.ns.bufferLength).toFixed(2));
                this.statsText = this.statsText + ("\ncurrentFPS: " + Number(this.ns.currentFPS).toFixed(2));
                this.statsText = this.statsText + ("\ndroppedFrames: " + Number(this.ns.info.droppedFrames).toFixed(2));
                this.statsText = this.statsText + "\n\n";
            }
            catch (e:Error)
            {
                statsText = "ERROR: " + e.message;
            }
            return;
        }

        internal function onFSHandler(arg1:flash.events.FullScreenEvent):void
        {
            if (stage.displayState == flash.display.StageDisplayState.NORMAL) 
            {
                this.overlayCanvas.height = 0;
                this.overlayCanvas.width = 0;
                this.overlayCanvas.removeElement(this.vidUI);
                this.videoPlaceholder.addElement(this.vidUI);
                this.lockedForFS = false;
                this.resizeVideo();
            }
            return;
        }

        internal function goFullScreen():void
        {
            if (this.vidMain.videoWidth == 0 && this.vidMain.videoHeight == 0) 
            {
                return;
            }
            this.lockedForFS = true;
            this.videoPlaceholder.removeElement(this.vidUI);
            this.overlayCanvas.width = this.vidMain.videoWidth;
            this.overlayCanvas.height = this.vidMain.videoHeight;
            this.overlayCanvas.addElement(this.vidUI);
            this.vidMain.x = 0;
            this.vidMain.y = 0;
            this.vidMain.height = this.vidMain.videoHeight;
            this.vidMain.width = this.vidMain.videoWidth;
            var loc1:*=new flash.geom.Rectangle(this.overlayCanvas.x, this.overlayCanvas.y, this.overlayCanvas.width + 2, this.overlayCanvas.height + 2);
            stage.fullScreenSourceRect = loc1;
            stage.displayState = flash.display.StageDisplayState.FULL_SCREEN;
            return;
        }

        internal function resizeVideo():void
        {
            var loc1:*=NaN;
            var loc2:*=NaN;
            var loc3:*=NaN;
            if (this.lockedForFS) 
            {
                return;
            }
            if (this.vidMain) 
            {
                if (this.vidMain.videoHeight == 0 || this.vidMain.videoWidth == 0) 
                {
                    this.vidMain.height = this.videoPlaceholder.height;
                    this.vidMain.width = this.videoPlaceholder.width;
                    this.vidMain.x = 0;
                    this.vidMain.y = 0;
                }
                else 
                {
                    loc1 = Number(this.vidMain.videoWidth) / Number(this.vidMain.videoHeight);
                    loc2 = Number(this.videoPlaceholder.width) / Number(this.videoPlaceholder.height);
                    if (loc1 >= loc2) 
                    {
                        loc3 = Number(this.vidMain.videoWidth) / Number(this.videoPlaceholder.width);
                        this.vidMain.width = this.videoPlaceholder.width;
                        this.vidMain.height = int(Number(this.vidMain.videoHeight) / loc3);
                        this.vidMain.x = 0;
                        this.vidMain.y = int((this.videoPlaceholder.height - this.vidMain.height) / 2);
                    }
                    else 
                    {
                        loc3 = Number(this.vidMain.videoHeight) / Number(this.videoPlaceholder.height);
                        this.vidMain.height = this.videoPlaceholder.height;
                        this.vidMain.width = int(Number(this.vidMain.videoWidth) / loc3);
                        this.vidMain.x = int((this.videoPlaceholder.width - this.vidMain.width) / 2);
                        this.vidMain.y = 0;
                    }
                }
            }
            return;
        }

        internal function waitingTimerHandler(arg1:flash.events.TimerEvent):void
        {
            if (this.ns) 
            {
                if (this.ns.bufferLength < 0.5 && Number(this.ns.bufferLength) == this.lastBuffer) 
                {
                    this.waitingMessage.visible = true;
                }
                else 
                {
                    this.waitingMessage.visible = false;
                }
                this.lastBuffer = this.ns.bufferLength;
            }
            return;
        }

        internal function toggleStatus():void
        {
            this.debugLog.visible = !this.debugLog.visible;
            this.statsLog.visible = !this.statsLog.visible;
            return;
        }

        internal function debug(arg1:*=null):void
        {
            this.debugText = this.debugText + (arg1 + "\n");
            trace(arg1);
            return;
        }

        internal namespace xmlns="http://ns.adobe.com/f4m/1.0";

        internal const WAITING_BUFFER_MESSAGE:String="Waiting for Video...";

        internal const WAITING_COMPLETE_MESSAGE:String="Stream Finished";

        internal const DEFAULT_BUFFER_TIME:Number=4;

        internal const VERSION:String="1.0.1";

        internal var bufferTime:Number=0;

        internal var lastBuffer:Number=0;

        internal var lastVolume:Number=0;

        internal var lockedForFS:Boolean=false;

        internal var manifestXML:XML;

        internal var nc:flash.net.NetConnection;

        internal var ng:flash.net.NetGroup;

        internal var ns:flash.net.NetStream;

        internal var reconnectTimer:flash.utils.Timer;

        internal var rtmfpURI:String;

        internal var statsTimer:flash.utils.Timer;

        internal var streamName:String;

        internal var vidMain:flash.media.Video;

        internal var vidUI:mx.core.UIComponent;

        internal var waitingTimer:flash.utils.Timer;

        [Bindable]
        internal var statsText:String="";

        [Bindable]
        internal var debugText:String="";

        [Bindable]
        internal var debugMode:Boolean=false;

        [Bindable]
        internal var waitingMessageText:String=WAITING_BUFFER_MESSAGE;

        internal var _embed_css_assets_unmuted_png_2089917964:Class=MulticastPlayer__embed_css_assets_unmuted_png_2089917964;

        internal var groupspec:String;

        internal var _embed_css_assets_muted_png_605320906:Class=MulticastPlayer__embed_css_assets_muted_png_605320906;

        internal var _embed_css_assets_fullscreen_png_553148874:Class=MulticastPlayer__embed_css_assets_fullscreen_png_553148874;
        ]]>
        
    </fx:Script>
</s:Application>
